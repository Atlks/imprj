package comxx.util;

import javax.jms.BytesMessage;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.command.ActiveMQTextMessage;
import org.bson.Document;

import com.alibaba.fastjson.JSONObject;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class PTPReceive {
    //ï¿½ï¿½ï¿½ï¿½ï¿½Ëºï¿½
    private String userName = "";
    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    private String password = "";
    //ï¿½ï¿½ï¿½Óµï¿½Ö·
    private String brokerURL = "tcp://localhost:61616";
    //connectionï¿½Ä¹ï¿½ï¿½ï¿½
    private ConnectionFactory factory;
    //ï¿½ï¿½ï¿½Ó¶ï¿½ï¿½ï¿½
    private Connection connection;
    //Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½á»°
    private Session session;
    //Ä¿ï¿½ÄµØ£ï¿½ï¿½ï¿½Êµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Óµï¿½ï¿½Ä¸ï¿½ï¿½ï¿½ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½Çµï¿½Ôµã£¬ï¿½ï¿½Ã´ï¿½ï¿½ï¿½ï¿½Êµï¿½ï¿½ï¿½ï¿½Queueï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½Ä£Ê½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Êµï¿½ï¿½ï¿½ï¿½Topic
    private Destination destination;
    //ï¿½ï¿½ï¿½ï¿½ï¿½ß£ï¿½ï¿½ï¿½ï¿½Ç½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÝµÄ¶ï¿½ï¿½ï¿½
    private MessageConsumer consumer;
    public static void main(String[] args) throws Exception {
        PTPReceive receive = new PTPReceive();
        receive.start();
        System.out.print("fff");
    }
    
    public void start() throws Exception{
      
            //ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ë£¬urlï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½Ó¹ï¿½ï¿½ï¿½
            factory = new ActiveMQConnectionFactory(userName, password, brokerURL);
            //ï¿½Ó¹ï¿½ï¿½ï¿½ï¿½Ð»ï¿½È¡Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
            connection = factory.createConnection();
            //ï¿½ï¿½ï¿½Ô¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è²»Ð´Ò²ï¿½Ç¿ï¿½ï¿½ÔµÄ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÏµÄ¸ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½ï¿½Ð´ï¿½ï¿?
            connection.start();
            //ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½session
            //ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½:ï¿½Ç·ï¿½Ö§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªtrueï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÔµÚ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½jmsï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎªSESSION_TRANSACTED
            //ï¿½Ú¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎªfalseÊ±ï¿½ï¿½paramBï¿½ï¿½Öµï¿½ï¿½ÎªSession.AUTO_ACKNOWLEDGEï¿½ï¿½Session.CLIENT_ACKNOWLEDGEï¿½ï¿½DUPS_OK_ACKNOWLEDGEï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½
            //Session.AUTO_ACKNOWLEDGEÎªï¿½Ô¶ï¿½È·ï¿½Ï£ï¿½ï¿½Í»ï¿½ï¿½Ë·ï¿½ï¿½ÍºÍ½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç½ï¿½ï¿½Õ¶Ë·ï¿½ï¿½ï¿½ï¿½ì³£ï¿½ï¿½Ò²ï¿½á±»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í³É¹ï¿½ï¿½ï¿?
            //Session.CLIENT_ACKNOWLEDGEÎªï¿½Í»ï¿½ï¿½ï¿½È·ï¿½Ï¡ï¿½ï¿½Í»ï¿½ï¿½Ë½ï¿½ï¿½Õµï¿½ï¿½ï¿½Ï¢ï¿½ó£¬±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½javax.jms.Messageï¿½ï¿½acknowledgeï¿½ï¿½ï¿½ï¿½ï¿½ï¿½jmsï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Å»áµ±ï¿½ï¿½ï¿½ï¿½ï¿½Í³É¹ï¿½ï¿½ï¿½ï¿½ï¿½É¾ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½
            //DUPS_OK_ACKNOWLEDGEï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È·ï¿½ï¿½Ä£Ê½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½Õ·ï¿½Ó¦ï¿½Ã³ï¿½ï¿½ï¿½Ä·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã´Ó´ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½á»°ï¿½ï¿½ï¿½ï¿½Í»ï¿½È·ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½Ä½ï¿½ï¿½Õ£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¸ï¿½È·ï¿½Ï¡ï¿½
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            //ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¿ï¿½ÄµØ£ï¿½ï¿½ï¿½Êµï¿½ï¿½Ò»ï¿½Â¾ï¿½Öªï¿½ï¿½ï¿½Ë£ï¿½activemqï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬Ê±Ö»ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½Ð°É£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½Î?"text-msg"ï¿½Ä¶ï¿½ï¿½Ð£ï¿½
            //ï¿½ï¿½ï¿½ï¿½á»°ï¿½ï¿½ï¿½áµ½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð£ï¿½ï¿½ï¿½È»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð²ï¿½ï¿½ï¿½ï¿½Ú£ï¿½ï¿½ï¿½ï¿½á±»ï¿½ï¿½ï¿½ï¿½
        //    Destination   destination = session.createQueue("text-msg");
            ///topic/chat.general
            Destination   destination = session.createTopic("chat.general");
            //ï¿½ï¿½ï¿½ï¿½sessionï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß¶ï¿½ï¿½ï¿½
            consumer = session.createConsumer(destination);
            
            
            //Êµï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½
            //Êµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ôºï¿½Ö»Òªï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½Í»ï¿½Í¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õµï¿½
            consumer.setMessageListener(new MessageListener() {
                public void onMessage(Message message) {
                    try {
                    	   System.out.println("receed----"+message);
                    	//   message.get
                        //ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½Õµï¿½ï¿½ï¿½ï¿½ï¿½
                    	   
                    	   if (message instanceof ActiveMQTextMessage) {
                    		    ActiveMQTextMessage amqMessage = (ActiveMQTextMessage) message;
                    		   // mqDelegate.execute(params, amqMessage.getText());
                    		    String text = ((TextMessage)message).getText();
                                System.out.println("receed"+text);
                    		} else {
                    		    BytesMessage bm = (BytesMessage) message;
                    		    byte data[] = new byte[(int) bm.getBodyLength()];
                    		    bm.readBytes(data);
                    		    String msg = new String(data);
                    		    JSONObject jo=   JSONObject.parseObject(msg );//JSONï¿½Ö·ï¿½ï¿½ï¿½×ªï¿½ï¿½ï¿½ï¿½
                    		    MongoClient mongoClient =mongodbConn. iniMongodb();
                    			MongoDatabase database = mongoClient.getDatabase("db1");
                    			MongoCollection<Document> collection = database.getCollection("coll1");
                    			
                    			
                    			
                    		    Document document2 = new Document("from", jo.getString("from")).  
                    	                append("to", jo.getString("to")).  
                    	                append("body", jo.getString("body")).append("msgori", msg); 
                    	        collection.insertOne(document2);
                    		    System.out.println(msg);
                    		}
                       
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            //ï¿½Ø±Õ½ï¿½ï¿½Õ¶Ë£ï¿½Ò²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö¹ï¿½ï¿½ï¿½ï¿½Å¶
//            consumer.close();
     
    }
}
